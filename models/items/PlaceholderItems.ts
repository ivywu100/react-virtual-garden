import { Blueprint } from "./inventoryItems/Blueprint";
import { HarvestedItem } from "./inventoryItems/HarvestedItem";
import { Seed } from "./inventoryItems/Seed";
import { PlaceholderItemTemplates } from "./ItemTemplate";
import { Decoration } from "./placedItems/Decoration";
import { EmptyItem } from "./placedItems/EmptyItem";
import { Plant } from "./placedItems/Plant";

export const generateRandomPlaceholderPlacedItem = () => {
	const placedItems = Object.values(PlaceholderItemTemplates.PlaceHolderItems).filter(item => item.type === "PlacedItem" && item.name != "error");
	return generateNewPlaceholderPlacedItem(placedItems[Math.floor(Math.random() * placedItems.length)].name, "autogenerated");
}

export const generateRandomPlaceholderInventoryItem = () => {
	const inventoryItems = Object.values(PlaceholderItemTemplates.PlaceHolderItems).filter(item => item.type === "InventoryItem" && item.name != "error");
	return generateNewPlaceholderInventoryItem(inventoryItems[Math.floor(Math.random() * inventoryItems.length)].name, 1);
}

export const generateNewPlaceholderPlacedItem = (itemName: string, status: string) => {
	const itemData = PlaceholderItemTemplates.PlaceHolderItems[itemName];
	if (itemData == null) return new Plant(PlaceholderItemTemplates.PlaceHolderItems.errorPlacedItem, "error");
	switch (itemData.subtype) {
		case "Plant":
			return new Plant(itemData, status);
		case "Decoration":
			return new Decoration(itemData, status);
		case "Ground":
			return new EmptyItem(itemData, status);
		default:
			return new Plant(PlaceholderItemTemplates.PlaceHolderItems.errorPlacedItem, "error");
	}
}

export const generateNewPlaceholderInventoryItem = (itemName: string, quantity: number) => {
	const itemData = PlaceholderItemTemplates.PlaceHolderItems[itemName];
	if (itemData == null) return new Seed(PlaceholderItemTemplates.PlaceHolderItems.errorInventoryItem, 1);
	switch (itemData.subtype) {
		case "Seed":
			return new Seed(itemData, quantity);
		case "Blueprint":
			return new Blueprint(itemData, quantity);
		case "HarvestedItem":
			return new HarvestedItem(itemData, quantity);
		default:
			return new Seed(PlaceholderItemTemplates.PlaceHolderItems.errorInventoryItem, 1);
	}
}
